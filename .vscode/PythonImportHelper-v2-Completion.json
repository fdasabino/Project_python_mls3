[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "drawing_elements",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"\n    Draws the elements in the screen.\n    PS: it's important to draw the elements on the right order.\n    \"\"\"\n    WIN.blit(BACKGROUND, (0, 0)) # background\n    pygame.draw.rect(WIN, BLUE, BORDER)\n    nasa_health_text = TEXT_FONT.render(\"Health: \" + str(nasa_health), 1, GREEN) # health status\n    alien_health_text = TEXT_FONT.render(\"Health: \" + str(alien_health), 1, RED) # health status   \n    WIN.blit(nasa_health_text, (10, 10))",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "movement_function_nasa",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def movement_function_nasa(keys_pressed, nasa):\n    \"\"\"\n    Defines the keys to move the nasa spaceships on the screen\n    \"\"\"\n    # nasa ship controls\n    keys_pressed = pygame.key.get_pressed()\n    if keys_pressed[pygame.K_a] and nasa.x - VEL > 0: # left\n        nasa.x -= VEL  \n    if keys_pressed[pygame.K_d] and nasa.x + VEL + nasa.width < BORDER.x: # right\n        nasa.x += VEL  ",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "movement_function_alien",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def movement_function_alien(keys_pressed, alien):\n    \"\"\"\n    defines the keys to move the alien spaceships on the screen\n    \"\"\"\n    # nasa ship controls\n    keys_pressed = pygame.key.get_pressed()\n    if keys_pressed[pygame.K_LEFT] and alien.x - VEL > BORDER.x + BORDER.width: # left\n        alien.x -= VEL  \n    if keys_pressed[pygame.K_RIGHT] and alien.x + VEL + alien.width < WIDTH: # right\n        alien.x += VEL  ",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "bullets_handle",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def bullets_handle(nasa_bullets, alien_bullets, nasa, alien):\n    \"\"\"\n    Handles bullets movement and collision of the fired bullets on the screen \n    \"\"\"\n    for bullet in nasa_bullets:\n        bullet.x += BULLET_VEL\n        if alien.colliderect(bullet):\n            pygame.event.post(pygame.event.Event(ALIEN_HIT))\n            nasa_bullets.remove(bullet)\n        elif bullet.x > WIDTH:",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def winner(text):\n    write_text = TEXT_FONT.render(text, 1, WHITE)\n    WIN.blit(write_text, (WIDTH/2 - write_text.get_width()/2, HEIGHT/2 - write_text.get_height()/2))\n    pygame.display.update()\n    pygame.time.delay(5000)\n# main function\ndef main():\n    \"\"\"\n    Handles the main loop and the logic of the game.\n    \"\"\"",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "def main():\n    \"\"\"\n    Handles the main loop and the logic of the game.\n    \"\"\"\n    nasa = pygame.Rect(100, 300, SHIPS_WIDTH, SHIPS_HEIGHT)\n    alien = pygame.Rect(700, 300, SHIPS_WIDTH, SHIPS_HEIGHT)\n    nasa_bullets = []\n    alien_bullets = []\n    nasa_health = 10\n    alien_health = 10",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "WIN",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "WIN = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Nasa Vs Aliens!\")\n# colours for the window\nWHITE = (255, 255, 255)\nGRAY = (102, 102, 102)\nBLUE = (0, 119, 204)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\n# frames per second\nFPS = 60",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "WHITE = (255, 255, 255)\nGRAY = (102, 102, 102)\nBLUE = (0, 119, 204)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\n# frames per second\nFPS = 60\n# velocity\nVEL = 8\n# bullets",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "GRAY",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "GRAY = (102, 102, 102)\nBLUE = (0, 119, 204)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\n# frames per second\nFPS = 60\n# velocity\nVEL = 8\n# bullets\nBULLET_VEL = 15",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "BLUE = (0, 119, 204)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\n# frames per second\nFPS = 60\n# velocity\nVEL = 8\n# bullets\nBULLET_VEL = 15\nMAX_BULLETS = 5",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "RED = (255, 0, 0)\nGREEN = (0, 255, 0)\n# frames per second\nFPS = 60\n# velocity\nVEL = 8\n# bullets\nBULLET_VEL = 15\nMAX_BULLETS = 5\n# images + sizes",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "GREEN = (0, 255, 0)\n# frames per second\nFPS = 60\n# velocity\nVEL = 8\n# bullets\nBULLET_VEL = 15\nMAX_BULLETS = 5\n# images + sizes\nSHIPS_WIDTH, SHIPS_HEIGHT = 80, 80",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "FPS = 60\n# velocity\nVEL = 8\n# bullets\nBULLET_VEL = 15\nMAX_BULLETS = 5\n# images + sizes\nSHIPS_WIDTH, SHIPS_HEIGHT = 80, 80\n# screen middle division\nBORDER = pygame.Rect(WIDTH//2 - 3, 0, 6, HEIGHT)",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "VEL",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "VEL = 8\n# bullets\nBULLET_VEL = 15\nMAX_BULLETS = 5\n# images + sizes\nSHIPS_WIDTH, SHIPS_HEIGHT = 80, 80\n# screen middle division\nBORDER = pygame.Rect(WIDTH//2 - 3, 0, 6, HEIGHT)\n# bullets sound\nSOUND_HIT = pygame.mixer.Sound(os.path.join('Assets', 'hit_sound.mp3'))",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "BULLET_VEL",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "BULLET_VEL = 15\nMAX_BULLETS = 5\n# images + sizes\nSHIPS_WIDTH, SHIPS_HEIGHT = 80, 80\n# screen middle division\nBORDER = pygame.Rect(WIDTH//2 - 3, 0, 6, HEIGHT)\n# bullets sound\nSOUND_HIT = pygame.mixer.Sound(os.path.join('Assets', 'hit_sound.mp3'))\nSOUND_GUN = pygame.mixer.Sound(os.path.join('Assets', 'laser_gun.mp3'))\n# texts import",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "MAX_BULLETS",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "MAX_BULLETS = 5\n# images + sizes\nSHIPS_WIDTH, SHIPS_HEIGHT = 80, 80\n# screen middle division\nBORDER = pygame.Rect(WIDTH//2 - 3, 0, 6, HEIGHT)\n# bullets sound\nSOUND_HIT = pygame.mixer.Sound(os.path.join('Assets', 'hit_sound.mp3'))\nSOUND_GUN = pygame.mixer.Sound(os.path.join('Assets', 'laser_gun.mp3'))\n# texts import\nTEXT_FONT = pygame.font.SysFont('arial', 50)",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "BORDER",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "BORDER = pygame.Rect(WIDTH//2 - 3, 0, 6, HEIGHT)\n# bullets sound\nSOUND_HIT = pygame.mixer.Sound(os.path.join('Assets', 'hit_sound.mp3'))\nSOUND_GUN = pygame.mixer.Sound(os.path.join('Assets', 'laser_gun.mp3'))\n# texts import\nTEXT_FONT = pygame.font.SysFont('arial', 50)\n# hit events \nNASA_HIT = pygame.USEREVENT + 1\nALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "SOUND_HIT",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "SOUND_HIT = pygame.mixer.Sound(os.path.join('Assets', 'hit_sound.mp3'))\nSOUND_GUN = pygame.mixer.Sound(os.path.join('Assets', 'laser_gun.mp3'))\n# texts import\nTEXT_FONT = pygame.font.SysFont('arial', 50)\n# hit events \nNASA_HIT = pygame.USEREVENT + 1\nALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship\nNASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "SOUND_GUN",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "SOUND_GUN = pygame.mixer.Sound(os.path.join('Assets', 'laser_gun.mp3'))\n# texts import\nTEXT_FONT = pygame.font.SysFont('arial', 50)\n# hit events \nNASA_HIT = pygame.USEREVENT + 1\nALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship\nNASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "TEXT_FONT",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "TEXT_FONT = pygame.font.SysFont('arial', 50)\n# hit events \nNASA_HIT = pygame.USEREVENT + 1\nALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship\nNASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship\nALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "NASA_HIT",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "NASA_HIT = pygame.USEREVENT + 1\nALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship\nNASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship\nALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "ALIEN_HIT",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "ALIEN_HIT = pygame.USEREVENT + 2\n# left spaceship\nNASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship\nALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "NASA_SPACESHIP_IMG",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "NASA_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','nasa.png'))\nNASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship\nALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function\ndef drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "NASA_SPACESHIP",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "NASA_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(NASA_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 270)\n# right spaceship\nALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function\ndef drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"\n    Draws the elements in the screen.",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "ALIEN_SPACESHIP_IMG",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "ALIEN_SPACESHIP_IMG = pygame.image.load(os.path.join('Assets','alien.png'))\nALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function\ndef drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"\n    Draws the elements in the screen.\n    PS: it's important to draw the elements on the right order.\n    \"\"\"",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "ALIEN_SPACESHIP",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "ALIEN_SPACESHIP = pygame.transform.rotate(pygame.transform.scale(ALIEN_SPACESHIP_IMG, (SHIPS_WIDTH, SHIPS_HEIGHT)), 90)\n# background image\nBACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function\ndef drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"\n    Draws the elements in the screen.\n    PS: it's important to draw the elements on the right order.\n    \"\"\"\n    WIN.blit(BACKGROUND, (0, 0)) # background",
        "detail": "run",
        "documentation": {}
    },
    {
        "label": "BACKGROUND",
        "kind": 5,
        "importPath": "run",
        "description": "run",
        "peekOfCode": "BACKGROUND = pygame.transform.scale(pygame.image.load(os.path.join('Assets', 'space.jpg')), (WIDTH,HEIGHT))\n# drawing function\ndef drawing_elements(alien, nasa, nasa_bullets, alien_bullets, alien_health, nasa_health):\n    \"\"\"\n    Draws the elements in the screen.\n    PS: it's important to draw the elements on the right order.\n    \"\"\"\n    WIN.blit(BACKGROUND, (0, 0)) # background\n    pygame.draw.rect(WIN, BLUE, BORDER)\n    nasa_health_text = TEXT_FONT.render(\"Health: \" + str(nasa_health), 1, GREEN) # health status",
        "detail": "run",
        "documentation": {}
    }
]